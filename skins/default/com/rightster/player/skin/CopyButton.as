package com.rightster.player.skin {	import flash.text.TextFormatAlign;	import flash.text.TextFormat;	import com.rightster.player.controller.IController;	import com.rightster.player.view.IColors;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	/**	 * @author KJR	 */	public class CopyButton extends Sprite {				private const TEXTFIELD_HEIGHT : Number = 18;		private static const TXT_COPY : String = "Copy";		private static const TXT_COPIED : String = "Copied";		private var controller : IController;		private var colorScheme : IColors;		private var bg : Sprite;		private var tf : TextField;		private var _width : Number = 63;		private var _height : Number = 32;		public function CopyButton(controller : IController) {			this.controller = controller;			colorScheme = this.controller.colors;			mouseChildren = false;			buttonMode = true;			createChildren();			draw();			layout();			setStyle();			updateTextDisplay(TXT_COPY);			registerEventListeners();		}		public function dispose() : void {			unregisterEventListeners();			disposeChildren();			colorScheme = null;			controller = null;		}		private function mouseEventHandler(event : MouseEvent) : void {			switch(event.type) {				case MouseEvent.CLICK:					updateTextDisplay(TXT_COPIED);					bg.transform.colorTransform = colorScheme.selectedCT;					break;				case MouseEvent.MOUSE_OVER:					bg.transform.colorTransform = colorScheme.highlightCT;					break;				case MouseEvent.MOUSE_OUT:					setStyle();					break;			}		}		private function createChildren() : void {			bg = new Sprite();			addChild(bg);			var tFormat : TextFormat = new TextFormat();			tFormat.font = Constants.FONT_NAME;			tFormat.size = Constants.FONT_SIZE_NORMAL;			tFormat.align = TextFormatAlign.LEFT;			tf = new TextField();			tf.defaultTextFormat = tFormat;			tf.multiline = false;			tf.wordWrap = false;			tf.embedFonts = false;			tf.selectable = false;			tf.height = TEXTFIELD_HEIGHT;			tf.width = this.width;			addChild(tf);		}		private function disposeChildren() : void {					}		private function draw() : void {			with(bg) {				graphics.clear();				graphics.beginFill(0xff0000, 1);				graphics.drawRect(0, 0, _width, _height);				graphics.endFill();			}		}		private function layout() : void {			centerTextField();		}		private function setStyle() : void {			bg.transform.colorTransform = colorScheme.inactiveCT;			tf.transform.colorTransform = colorScheme.primaryCT;		}		private function updateTextDisplay(str : String) : void {			tf.text = str;			tf.autoSize = TextFieldAutoSize.LEFT;			centerTextField();		}		private function centerTextField() : void {			tf.x = Math.round(_width / 2 - tf.width / 2);			tf.y = Math.round(_height / 2 - tf.height / 2);		}		private function registerEventListeners() : void {			addEventListener(MouseEvent.CLICK, mouseEventHandler);			addEventListener(MouseEvent.MOUSE_OVER, mouseEventHandler);			addEventListener(MouseEvent.MOUSE_OUT, mouseEventHandler);		}		private function unregisterEventListeners() : void {			removeEventListener(MouseEvent.CLICK, mouseEventHandler);			removeEventListener(MouseEvent.MOUSE_OVER, mouseEventHandler);			removeEventListener(MouseEvent.MOUSE_OUT, mouseEventHandler);		}	}}